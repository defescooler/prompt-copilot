# Production Docker Compose configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  postgres:
    # Production PostgreSQL settings
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-prompt_password_2024_prod}
    ports:
      - "127.0.0.1:5432:5432"  # Only allow local connections
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backend:
    # Production Flask settings
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DATABASE_URL=${DATABASE_URL:-postgresql://prompt_user:prompt_password_2024_prod@postgres:5432/prompt_copilot_db}
      - SECRET_KEY=${SECRET_KEY:-prompt-copilot-production-secret-key-2024}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    ports:
      - "8002:8002"
    volumes:
      - ./logs:/app/logs
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command: >
      sh -c "
        echo 'Production mode: Initializing database...' &&
        python init_db.py &&
        echo 'Starting Flask in production mode...' &&
        gunicorn --bind 0.0.0.0:8002 --workers 4 --timeout 120 src.main:app
      "

  redis:
    # Production Redis settings
    ports:
      - "127.0.0.1:6379:6379"  # Only allow local connections
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: prompt_copilot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - prompt_copilot_network
    restart: always

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  prompt_copilot_network:
    driver: bridge 